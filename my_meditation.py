import asyncio
import time
from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.client.default import DefaultBotProperties

API_TOKEN = '7787463545:AAH6M-_sYua5CsIgr3L1eq1hTuQfWGIynk4'

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–∞
user_times = {}
user_meditations = {}
user_uploading = {}
user_active_sessions = {}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_keyboard():
    return ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [KeyboardButton(text="üßò –ù–∞—á–∞—Ç—å –º–µ–¥–∏—Ç–∞—Ü–∏—é")],
        [KeyboardButton(text="üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–¥–∏—Ç–∞—Ü–∏—é")],
        [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
    ])

@dp.message(CommandStart())
async def start_handler(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–µ–¥–∏—Ç–∞—Ü–∏–π üßò‚Äç‚ôÇÔ∏è\n\n"
        "–¢—ã –º–æ–∂–µ—à—å:\n"
        "‚Äî –ó–∞–≥—Ä—É–∂–∞—Ç—å —Å–≤–æ–∏ –∞—É–¥–∏–æ –∏ –≤–∏–¥–µ–æ –º–µ–¥–∏—Ç–∞—Ü–∏–∏\n"
        "‚Äî –°–ª—É—à–∞—Ç—å –∏—Ö –∏ —Å—á–∏—Ç–∞—Ç—å –≤—Ä–µ–º—è\n"
        "‚Äî –°–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É",
        reply_markup=main_keyboard()
    )

@dp.message(F.text == "üßò –ù–∞—á–∞—Ç—å –º–µ–¥–∏—Ç–∞—Ü–∏—é")
async def meditation_menu(message: types.Message):
    user_id = message.from_user.id
    meditations = user_meditations.get(user_id)

    if not meditations:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–µ–¥–∏—Ç–∞—Ü–∏–π. –û—Ç–ø—Ä–∞–≤—å —Ñ–∞–π–ª —á–µ—Ä–µ–∑ üì•.")
        return

    await message.answer(
        "üßò‚Äç‚ôÄÔ∏è –£—Å—Ç—Ä–æ–π—Å—è –ø–æ—É–¥–æ–±–Ω–µ–µ. –°–¥–µ–ª–∞–π –ø–∞—Ä—É –≥–ª—É–±–æ–∫–∏—Ö –≤–¥–æ—Ö–æ–≤.\n"
        "–ö–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤ ‚Äî –≤—ã–±–µ—Ä–∏ –º–µ–¥–∏—Ç–∞—Ü–∏—é, –∏ —è –Ω–∞—á–Ω—É –æ—Ç—Å—á—ë—Ç –≤—Ä–µ–º–µ–Ω–∏ üôè"
    )

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=m["title"], callback_data=f"start_{i}")]
            for i, m in enumerate(meditations)
        ]
    )

    await message.answer("üìÑ –í—ã–±–µ—Ä–∏ –º–µ–¥–∏—Ç–∞—Ü–∏—é:", reply_markup=keyboard)

@dp.callback_query(F.data.startswith("start_"))
async def start_meditation(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    index = int(callback.data.replace("start_", ""))
    meditation = user_meditations[user_id][index]

    user_active_sessions[user_id] = time.time()

    if meditation["type"] == "audio":
        await callback.message.answer_audio(
            audio=meditation["file_id"],
            caption=f"‚ñ∂Ô∏è <b>{meditation['title']}</b>\nüïí –¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω..."
        )
    else:
        await callback.message.answer_video(
            video=meditation["file_id"],
            caption=f"‚ñ∂Ô∏è <b>{meditation['title']}</b>\nüïí –¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω..."
        )

    end_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –º–µ–¥–∏—Ç–∞—Ü–∏—é", callback_data="end_meditation")]
        ]
    )
    await callback.message.answer("–ö–æ–≥–¥–∞ –∑–∞–≤–µ—Ä—à–∏—à—å ‚Äî –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá", reply_markup=end_keyboard)
    await callback.answer()

@dp.callback_query(F.data == "end_meditation")
async def end_meditation(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    start_time = user_active_sessions.get(user_id)

    if not start_time:
        await callback.message.answer("‚õî –ú–µ–¥–∏—Ç–∞—Ü–∏—è –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞.")
        await callback.answer()
        return

    end_time = time.time()
    elapsed_minutes = int((end_time - start_time) / 60)
    elapsed_minutes = max(1, elapsed_minutes)

    user_times[user_id] = user_times.get(user_id, 0) + elapsed_minutes
    user_active_sessions.pop(user_id)

    await callback.message.answer(
        f"‚úÖ –ú–µ–¥–∏—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n‚è± –ó–∞—Å—á–∏—Ç–∞–Ω–æ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: <b>{elapsed_minutes}</b> –º–∏–Ω—É—Ç üôè",
        reply_markup=main_keyboard()
    )
    await callback.answer()

@dp.message(F.text == "üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–¥–∏—Ç–∞—Ü–∏—é")
async def upload_instruction(message: types.Message):
    user_id = message.from_user.id
    user_uploading[user_id] = True
    await message.answer("–û—Ç–ø—Ä–∞–≤—å –∞—É–¥–∏–æ—Ñ–∞–π–ª (.mp3) –∏–ª–∏ –≤–∏–¥–µ–æ (.mp4, .mov) ‚Äî —è —Å–æ—Ö—Ä–∞–Ω—é –µ–≥–æ.\n\n–û—Ç–ø—Ä–∞–≤—å /cancel —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏.")

@dp.message(F.text == "/cancel")
async def cancel_upload(message: types.Message):
    user_id = message.from_user.id
    user_uploading[user_id] = False
    await message.answer("‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_keyboard())

@dp.message(F.audio | F.video | F.document)
async def handle_media_upload(message: types.Message):
    user_id = message.from_user.id

    if not user_uploading.get(user_id):
        await message.reply("‚õî –°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ üì• '–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–¥–∏—Ç–∞—Ü–∏—é'")
        return

    file = message.audio or message.video or message.document
    mime_type = file.mime_type or ""
    is_audio = "audio" in mime_type
    is_video = "video" in mime_type

    if not (is_audio or is_video):
        await message.reply("‚õî –¢–æ–ª—å–∫–æ –∞—É–¥–∏–æ (.mp3) –∏ –≤–∏–¥–µ–æ (.mp4, .mov) –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è.")
        return

    meditation = {
        "title": file.file_name or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
        "file_id": file.file_id,
        "duration": file.duration or 0,
        "type": "audio" if is_audio else "video"
    }

    if user_id not in user_meditations:
        user_meditations[user_id] = []

    user_meditations[user_id].append(meditation)
    user_uploading[user_id] = False

    await message.reply(
        f"‚úÖ –ú–µ–¥–∏—Ç–∞—Ü–∏—è <b>{meditation['title']}</b> –∑–∞–≥—Ä—É–∂–µ–Ω–∞!\n"
        f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞: {meditation['duration'] // 60} –º–∏–Ω {meditation['duration'] % 60} —Å–µ–∫",
        reply_markup=main_keyboard()
    )

@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def stats_handler(message: types.Message):
    user_id = message.from_user.id
    total = user_times.get(user_id, 0)
    await message.answer(f"üìä –¢—ã –≤—Å–µ–≥–æ –º–µ–¥–∏—Ç–∏—Ä–æ–≤–∞–ª: <b>{total}</b> –º–∏–Ω—É—Ç")

async def main():
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
