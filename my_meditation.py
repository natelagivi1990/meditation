
import sys
import unittest

# --- Check SSL module ---
try:
    import ssl
except ImportError:
    print("[ERROR] ssl module is not available in this environment. aiogram requires ssl.")
    print("Please install or enable the ssl module, or use a Python environment that includes it.")
    sys.exit(1)

# --- Check multiprocessing module ---
try:
    import multiprocessing
except ImportError:
    print("[ERROR] _multiprocessing module is missing. APScheduler may require it for ProcessPoolExecutor.")
    print("Please install or enable the multiprocessing module, or use a Python environment that includes it.")
    sys.exit(1)

import asyncio
import time
import json
import os
import logging

from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import (
    Message, CallbackQuery,
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton,
    ContentType
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

API_TOKEN = "7787463545:AAH6M-_sYua5CsIgr3L1eq1hTuQfWGIynk4"

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
scheduler = AsyncIOScheduler()

STATS_FILE = "stats.json"
MEDITATIONS_FILE = "meditations.json"

user_meditations = {}   # {user_id: [ {title, file_id, type}, ... ]}
user_uploading = {}     # {user_id: {step, file_id, default_title, type}}
user_stats = {}         # {user_id: { '–û–±—â–µ–µ –≤—Ä–µ–º—è':X, '–ú–µ–¥–∏—Ç–∞—Ü–∏—è1':Y, ... }}
user_active_sessions = {} # {user_id: {start_time, title}}

###########################################################
# JSON LOADING/SAVING
###########################################################
def load_json():
    global user_meditations, user_stats
    if os.path.exists(MEDITATIONS_FILE):
        with open(MEDITATIONS_FILE, "r", encoding="utf-8") as f:
            user_meditations.update(json.load(f))
    if os.path.exists(STATS_FILE):
        with open(STATS_FILE, "r", encoding="utf-8") as f:
            try:
                user_stats.update(json.load(f))
            except json.JSONDecodeError:
                logger.warning("stats.json is corrupted, resetting.")
                user_stats.clear()

def save_json():
    with open(MEDITATIONS_FILE, "w", encoding="utf-8") as f:
        json.dump(user_meditations, f, ensure_ascii=False)
    with open(STATS_FILE, "w", encoding="utf-8") as f:
        json.dump(user_stats, f, ensure_ascii=False)

###########################################################
# KEYBOARDS
###########################################################
def universal_keyboard():
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –º–µ–Ω—é (–Ω–∏–∂–Ω–µ–µ): ¬´–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–¥–∏—Ç–∞—Ü–∏—é¬ª, ¬´–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞¬ª, ¬´–ú–µ–Ω—é¬ª
    """
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–¥–∏—Ç–∞—Ü–∏—é"), KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
            [KeyboardButton(text="–ú–µ–Ω—é")]
        ],
        resize_keyboard=True
    )

###########################################################
# HANDLERS
###########################################################

@dp.message(CommandStart())
async def cmd_start(message: Message):
    """
    /start ‚Äî –ø—Ä–∏–≤–µ—Ç, –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è, –æ—Å–Ω–æ–≤–Ω–æ–π —ç–∫—Ä–∞–Ω
    """
    user_id = str(message.from_user.id)
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –º–µ–¥–∏—Ç–∞—Ü–∏–π!")

    await asyncio.sleep(5)

    instructions = (
        "<b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</b>:\n"
        "1) –†–∞—Å–ø–æ–ª–æ–∂–∏—Ç–µ—Å—å —É–¥–æ–±–Ω–æ\n"
        "2) –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—É—é –º–µ–¥–∏—Ç–∞—Ü–∏—é, –±–æ—Ç –Ω–∞—á–Ω—ë—Ç –æ—Ç—Å—á—ë—Ç\n"
        "3) –ü–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –º–µ–¥–∏—Ç–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å'\n"
        "4) –í —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ —É–≤–∏–¥–∏—Ç–µ –æ–±—â–µ–µ –≤—Ä–µ–º—è (–∏ –ø–æ –∫–∞–∂–¥–æ–π –º–µ–¥–∏—Ç–∞—Ü–∏–∏).\n"
    )
    await message.answer(instructions, reply_markup=universal_keyboard())

    meditations = user_meditations.get(user_id, [])
    if meditations:
        buttons = []
        for i, m in enumerate(meditations):
            buttons.append([
                InlineKeyboardButton(text="‚ñ∂Ô∏è " + m["title"], callback_data=f"start_{i}"),
                InlineKeyboardButton(text="üóë", callback_data=f"delete_{i}")
            ])
        kb = InlineKeyboardMarkup(inline_keyboard=buttons)
        await message.answer("üßò‚Äç‚ôÇÔ∏è –í—ã–±–µ—Ä–∏ –º–µ–¥–∏—Ç–∞—Ü–∏—é:", reply_markup=kb)
    else:
        await message.answer(
            "–£ —Ç–µ–±—è –µ—â—ë –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–µ–¥–∏—Ç–∞—Ü–∏–π. "
            "–ò—Å–ø–æ–ª—å–∑—É–π 'üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–¥–∏—Ç–∞—Ü–∏—é', —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å."
        )

@dp.message(F.text == "–ú–µ–Ω—é")
async def show_menu(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ—Ç –∂–µ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –º–µ–¥–∏—Ç–∞—Ü–∏–π –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∑–∞–Ω–æ–≤–æ (–∏–ª–∏ –∫–æ—Ä–æ—Ç–∫–æ)."""
    user_id = str(message.from_user.id)
    meditations = user_meditations.get(user_id, [])

    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=universal_keyboard())

    if not meditations:
        await message.answer(
            "–£ —Ç–µ–±—è –µ—â—ë –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–µ–¥–∏—Ç–∞—Ü–∏–π. "
            "–ò—Å–ø–æ–ª—å–∑—É–π 'üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–¥–∏—Ç–∞—Ü–∏—é', —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å."
        )
    else:
        buttons = []
        for i, m in enumerate(meditations):
            buttons.append([
                InlineKeyboardButton(text="‚ñ∂Ô∏è " + m["title"], callback_data=f"start_{i}"),
                InlineKeyboardButton(text="üóë", callback_data=f"delete_{i}")
            ])
        kb = InlineKeyboardMarkup(inline_keyboard=buttons)
        await message.answer("üßò‚Äç‚ôÇÔ∏è –í—ã–±–µ—Ä–∏ –º–µ–¥–∏—Ç–∞—Ü–∏—é:", reply_markup=kb)

@dp.message(F.text == "üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–¥–∏—Ç–∞—Ü–∏—é")
async def upload_menu(message: Message):
    """
    –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏—Ç–∞—Ü–∏–∏
    """
    user_id = str(message.from_user.id)
    user_uploading[user_id] = {"step": "wait_file"}
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å –º–µ–¥–∏—Ç–∞—Ü–∏—é (mp3/mp4 —Ñ–∞–π–ª)",
        reply_markup=universal_keyboard()
    )

@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: Message):
    user_id = str(message.from_user.id)
    stats = user_stats.get(user_id, {})

    if not stats:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.", reply_markup=universal_keyboard())
        return

    overall = stats.get("–û–±—â–µ–µ –≤—Ä–µ–º—è", 0)
    text = "üìä <b>–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>:\n"
    for t, val in stats.items():
        if t == "–û–±—â–µ–µ –≤—Ä–µ–º—è":
            continue
        text += f"‚Äî {t}: {val} –º–∏–Ω\n"
    text += f"\n–í—Å–µ–≥–æ (–ø–æ –≤—Å–µ–º –º–µ–¥–∏—Ç–∞—Ü–∏—è–º): {overall} –º–∏–Ω"

    await message.answer(text, reply_markup=universal_keyboard())

@dp.message()
async def handle_uploading_text(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–¥–∏—Ç–∞—Ü–∏–∏ (–Ω–∞–∑–≤–∞–Ω–∏–µ)."""
    user_id = str(message.from_user.id)
    data = user_uploading.get(user_id)
    if not data or data.get("step") != "wait_file":
        # –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞
        return

    # –ï—Å–ª–∏ —é–∑–µ—Ä –ø—Ä–∏—Å–ª–∞–ª –Ω–µ —Ñ–∞–π–ª, –∞ —Ç–µ–∫—Å—Ç, —Å–∫–∞–∂–µ–º "–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–π–ª"
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å MP3/MP4 —Ñ–∞–π–ª. –ò–ª–∏ –Ω–∞–∂–º–∏ '–ú–µ–Ω—é'"
    )

###########################################################
# –ü–†–ò–ù–ò–ú–ê–ï–ú –§–ê–ô–õ (mp3/mp4) => –ù–ê–ó–í–ê–ù–ò–ï => –°–û–•–†–ê–ù–ï–ù–ò–ï
###########################################################

@dp.message(F.content_type.in_([ContentType.AUDIO, ContentType.VIDEO, ContentType.DOCUMENT]))
async def on_file_received(message: Message):
    user_id = str(message.from_user.id)
    data = user_uploading.get(user_id)
    if not data or data["step"] != "wait_file":
        return

    file_id = None
    file_type = None

    if message.audio:
        file_id = message.audio.file_id
        file_type = "audio"
        default_title = message.audio.file_name if message.audio.file_name else "Unnamed"
    elif message.video:
        file_id = message.video.file_id
        file_type = "video"
        default_title = message.video.file_name if message.video.file_name else "Unnamed"
    else:
        fname = message.document.file_name.lower()
        if fname.endswith(".mp3"):
            file_type = "audio"
        elif fname.endswith(".mp4"):
            file_type = "video"
        file_id = message.document.file_id
        default_title = message.document.file_name

    if not file_id or not file_type:
        await message.answer("–§–∞–π–ª –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç (–Ω—É–∂–µ–Ω mp3/mp4).", reply_markup=universal_keyboard())
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    entry = {
        "title": default_title,
        "file_id": file_id,
        "type": file_type
    }
    user_meditations.setdefault(user_id, []).append(entry)
    save_json()

    user_uploading.pop(user_id, None)

    await message.answer(
        f"‚úÖ –ú–µ–¥–∏—Ç–∞—Ü–∏—è <b>{default_title}</b> —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!",
        reply_markup=universal_keyboard()
    )

###########################################################
# –°–¢–ê–†–¢ / –ó–ê–í–ï–†–®–ò–¢–¨ –ú–ï–î–ò–¢–ê–¶–ò–Æ
###########################################################
@dp.callback_query(F.data.startswith("start_"))
async def on_start_meditation(callback: CallbackQuery):
    user_id = str(callback.from_user.id)
    index = int(callback.data.replace("start_", ""))
    meditation = user_meditations[user_id][index]

    user_active_sessions[user_id] = {
        "start_time": time.time(),
        "title": meditation["title"]
    }

    finish_btn = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"end_{index}")]]
    )

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø
    if meditation["type"] == "audio":
        await callback.message.answer_audio(
            meditation["file_id"],
            caption=f"‚ñ∂Ô∏è {meditation['title']}",
            reply_markup=finish_btn
        )
    elif meditation["type"] == "video":
        await callback.message.answer_video(
            meditation["file_id"],
            caption=f"‚ñ∂Ô∏è {meditation['title']}",
            reply_markup=finish_btn
        )
    else:
        await callback.message.answer(
            "üå¨ –≠—Ç–æ –¥—ã—Ö–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞.\n–ß—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å –µ—ë, –≤–≤–µ–¥–∏: /–¥—ã—Ö–∞–Ω–∏–µ",
            reply_markup=finish_btn
        )

    await callback.answer()

@dp.callback_query(F.data.startswith("end_"))
async def on_end_meditation(callback: CallbackQuery):
    user_id = str(callback.from_user.id)
    session = user_active_sessions.pop(user_id, None)
    if not session:
        await callback.message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏.")
        await callback.answer()
        return

    total_sec = time.time() - session["start_time"]
    duration = max(1, int(total_sec // 60))
    title = session["title"]

    user_stats.setdefault(user_id, {})
    user_stats[user_id].setdefault(title, 0)
    user_stats[user_id][title] += duration

    user_stats[user_id].setdefault("–û–±—â–µ–µ –≤—Ä–µ–º—è", 0)
    user_stats[user_id]["–û–±—â–µ–µ –≤—Ä–µ–º—è"] += duration

    save_json()

    await callback.message.answer(
        f"‚úÖ –ú–µ–¥–∏—Ç–∞—Ü–∏—è <b>{title}</b> –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –¥–æ–±–∞–≤–ª–µ–Ω–æ {duration} –º–∏–Ω.\n"
        "–í—ã–±–∏—Ä–∞–π —Å–ª–µ–¥—É—é—â—É—é –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞–π –Ω–æ–≤—ã–µ –º–µ–¥–∏—Ç–∞—Ü–∏–∏!",
        reply_markup=universal_keyboard()
    )

    meditations = user_meditations.get(user_id, [])
    if not meditations:
        await callback.message.answer(
            "–£ —Ç–µ–±—è –µ—â—ë –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–µ–¥–∏—Ç–∞—Ü–∏–π. "
            "–ò—Å–ø–æ–ª—å–∑—É–π 'üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–¥–∏—Ç–∞—Ü–∏—é', —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å."
        )
    else:
        buttons = []
        for i, m in enumerate(meditations):
            buttons.append([
                InlineKeyboardButton(text="‚ñ∂Ô∏è " + m["title"], callback_data=f"start_{i}"),
                InlineKeyboardButton(text="üóë", callback_data=f"delete_{i}")
            ])
        kb = InlineKeyboardMarkup(inline_keyboard=buttons)
        await callback.message.answer("üßò‚Äç‚ôÇÔ∏è –í—ã–±–µ—Ä–∏ –º–µ–¥–∏—Ç–∞—Ü–∏—é:", reply_markup=kb)

    await callback.answer()

###########################################################
# –£–î–ê–õ–ï–ù–ò–ï
###########################################################
@dp.callback_query(F.data.startswith("delete_"))
async def on_delete_meditation(callback: CallbackQuery):
    user_id = str(callback.from_user.id)
    index = int(callback.data.replace("delete_", ""))
    med = user_meditations[user_id].pop(index)
    save_json()
    await callback.message.answer(f"üóë –£–¥–∞–ª–µ–Ω–æ: <b>{med['title']}</b>")
    await callback.answer()

###########################################################
# MAIN
###########################################################
async def main():
    load_json()
    print("‚úÖ –ó–∞–ø—É—â–µ–Ω –±–æ—Ç (aiogram 3.x).")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())


###########################################################
# TESTS
###########################################################
class TestSSLModule(unittest.TestCase):
    def test_ssl_import(self):
        self.assertIsNotNone(ssl)

class TestMultiprocessingModule(unittest.TestCase):
    def test_multiprocessing_import(self):
        self.assertIsNotNone(multiprocessing)

class TestScheduler(unittest.TestCase):
    def test_scheduler_init(self):
        try:
            s = AsyncIOScheduler()
            self.assertIsNotNone(s)
        except Exception as e:
            self.fail(f"Scheduler initialization failed unexpectedly: {e}")
