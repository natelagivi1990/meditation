import asyncio
import time
import json
import os
from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.client.default import DefaultBotProperties

API_TOKEN = '—Ç–≤–æ–π_—Ç–æ–∫–µ–Ω_—Å—é–¥–∞'

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# === –§–ê–ô–õ–´ ===
STATS_FILE = "stats.json"
MEDITATIONS_FILE = "meditations.json"

# === –î–ê–ù–ù–´–ï ===
user_stats = {}         # user_id -> {"–û–±—â–µ–µ –≤—Ä–µ–º—è": 35, "–Ω–∞–∑–≤–∞–Ω–∏–µ": 10, ...}
user_meditations = {}   # user_id -> —Å–ø–∏—Å–æ–∫ –º–µ–¥–∏—Ç–∞—Ü–∏–π
user_active_sessions = {}  # user_id -> start_time
user_uploading = {}     # user_id -> –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–≥—Ä—É–∑–∫–∏

# === –ó–ê–ì–†–£–ó–ö–ê / –°–û–•–†–ê–ù–ï–ù–ò–ï ===
def load_json():
    global user_stats, user_meditations
    if os.path.exists(STATS_FILE):
        with open(STATS_FILE, "r") as f:
            user_stats = json.load(f)
    if os.path.exists(MEDITATIONS_FILE):
        with open(MEDITATIONS_FILE, "r") as f:
            user_meditations = json.load(f)

def save_json():
    with open(STATS_FILE, "w") as f:
        json.dump(user_stats, f)
    with open(MEDITATIONS_FILE, "w") as f:
        json.dump(user_meditations, f)

# === –ö–õ–ê–í–ò–ê–¢–£–†–ê ===
def main_keyboard():
    return ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [KeyboardButton(text="üßò –ù–∞—á–∞—Ç—å –º–µ–¥–∏—Ç–∞—Ü–∏—é")],
        [KeyboardButton(text="üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–¥–∏—Ç–∞—Ü–∏—é")],
        [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
    ])

# === –°–¢–ê–†–¢ ===
@dp.message(CommandStart())
async def start_handler(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–µ–¥–∏—Ç–∞—Ü–∏–π üßò‚Äç‚ôÇÔ∏è\n\n"
        "–¢—ã –º–æ–∂–µ—à—å:\n"
        "‚Äî –ó–∞–≥—Ä—É–∂–∞—Ç—å –∞—É–¥–∏–æ –∏ –≤–∏–¥–µ–æ –º–µ–¥–∏—Ç–∞—Ü–∏–∏\n"
        "‚Äî –í—ã–±–∏—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é\n"
        "‚Äî –°–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–∂–¥–æ–π –º–µ–¥–∏—Ç–∞—Ü–∏–∏",
        reply_markup=main_keyboard()
    )

# === –ó–ê–ì–†–£–ó–ö–ê –ú–ï–î–ò–¢–ê–¶–ò–ò ===
@dp.message(F.text == "üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–¥–∏—Ç–∞—Ü–∏—é")
async def start_upload(message: types.Message):
    user_id = str(message.from_user.id)
    user_uploading[user_id] = {"step": "wait_file"}
    await message.answer("–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –º–µ–¥–∏—Ç–∞—Ü–∏—é (mp3/mp4 —Ñ–∞–π–ª)")

@dp.message(F.text == "/cancel")
async def cancel_upload(message: types.Message):
    user_id = str(message.from_user.id)
    user_uploading.pop(user_id, None)
    await message.answer("‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=main_keyboard())

@dp.message(F.audio | F.video | F.document)
async def handle_media(message: types.Message):
    user_id = str(message.from_user.id)
    if user_id not in user_uploading or user_uploading[user_id]["step"] != "wait_file":
        await message.answer("‚õî –ù–∞–∂–º–∏ —Å–Ω–∞—á–∞–ª–∞ üì• '–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–¥–∏—Ç–∞—Ü–∏—é'")
        return

    file = message.audio or message.video or message.document
    mime = file.mime_type or ""
    is_audio = "audio" in mime
    is_video = "video" in mime

    if not (is_audio or is_video):
        await message.answer("‚õî –¢–æ–ª—å–∫–æ mp3/mp4")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ—É
    user_uploading[user_id].update({
        "step": "wait_title",
        "file_id": file.file_id,
        "default_title": file.file_name or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
        "duration": file.duration or 0,
        "type": "audio" if is_audio else "video"
    })

    await message.answer(
        f"üìé –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω. –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: <b>{file.file_name}</b>\n"
        "–ù–∞–ø–∏—à–∏ —Å–≤–æ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å '–û—Å—Ç–∞–≤–∏—Ç—å', —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å.")

@dp.message(F.text & (lambda msg: msg.from_user.id))
async def handle_title_or_category(message: types.Message):
    user_id = str(message.from_user.id)

    # –í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è
    if user_id in user_uploading and user_uploading[user_id]["step"] == "wait_title":
        title = message.text.strip()
        if title.lower() == "–æ—Å—Ç–∞–≤–∏—Ç—å":
            title = user_uploading[user_id]["default_title"]
        user_uploading[user_id]["title"] = title
        user_uploading[user_id]["step"] = "wait_category"
        await message.answer("üóÇ –í –∫–∞–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ–±–∞–≤–∏—Ç—å?\n–í—ã–±–µ—Ä–∏: <b>–î–∏—Å–ø–µ–Ω–∑–∞</b> –∏–ª–∏ <b>–î—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ</b>")
        return

    # –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if user_id in user_uploading and user_uploading[user_id]["step"] == "wait_category":
        category = message.text.strip().lower()
        if category not in ["–¥–∏—Å–ø–µ–Ω–∑–∞", "–¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ"]:
            await message.answer("‚õî –í–∞—Ä–∏–∞–Ω—Ç—ã: –î–∏—Å–ø–µ–Ω–∑–∞ –∏–ª–∏ –î—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ")
            return

        data = user_uploading[user_id]
        meditation = {
            "title": data["title"],
            "category": category.capitalize(),
            "file_id": data["file_id"],
            "duration": data["duration"],
            "type": data["type"]
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        user_meditations.setdefault(user_id, []).append(meditation)
        user_uploading.pop(user_id)
        save_json()

        await message.answer(f"‚úÖ –ú–µ–¥–∏—Ç–∞—Ü–∏—è <b>{meditation['title']}</b> –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é {meditation['category']}", reply_markup=main_keyboard())
        return

# === –í–´–ë–û–† –ú–ï–î–ò–¢–ê–¶–ò–ò ===
@dp.message(F.text == "üßò –ù–∞—á–∞—Ç—å –º–µ–¥–∏—Ç–∞—Ü–∏—é")
async def choose_meditation(message: types.Message):
    user_id = str(message.from_user.id)
    meditations = user_meditations.get(user_id, [])

    if not meditations:
        await message.answer("–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–µ–¥–∏—Ç–∞—Ü–∏–π.")
        return

    await message.answer("üßò‚Äç‚ôÄÔ∏è –£—Å—Ç—Ä–æ–π—Å—è –ø–æ—É–¥–æ–±–Ω–µ–µ. –ö–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤ ‚Äî –≤—ã–±–µ—Ä–∏ –º–µ–¥–∏—Ç–∞—Ü–∏—é üôè")

    buttons = [
        InlineKeyboardButton(text=f"{m['title']} [{m['category']}]", callback_data=f"start_{i}")
        for i, m in enumerate(meditations)
    ]

    keyboard = InlineKeyboardMarkup(inline_keyboard=[[btn] for btn in buttons])
    await message.answer("üìÑ –í—ã–±–µ—Ä–∏ –º–µ–¥–∏—Ç–∞—Ü–∏—é:", reply_markup=keyboard)

@dp.callback_query(F.data.startswith("start_"))
async def start_meditation(callback: types.CallbackQuery):
    user_id = str(callback.from_user.id)
    index = int(callback.data.replace("start_", ""))
    meditation = user_meditations[user_id][index]

    user_active_sessions[user_id] = {
        "start": time.time(),
        "title": meditation["title"]
    }

    if meditation["type"] == "audio":
        await callback.message.answer_audio(audio=meditation["file_id"], caption=f"‚ñ∂Ô∏è <b>{meditation['title']}</b>")
    else:
        await callback.message.answer_video(video=meditation["file_id"], caption=f"‚ñ∂Ô∏è <b>{meditation['title']}</b>")

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –º–µ–¥–∏—Ç–∞—Ü–∏—é", callback_data="end_meditation")]]
    )
    await callback.message.answer("–ù–∞–∂–º–∏, –∫–æ–≥–¥–∞ –∑–∞–≤–µ—Ä—à–∏—à—å –º–µ–¥–∏—Ç–∞—Ü–∏—é üëá", reply_markup=keyboard)
    await callback.answer()

@dp.callback_query(F.data == "end_meditation")
async def end_meditation(callback: types.CallbackQuery):
    user_id = str(callback.from_user.id)
    session = user_active_sessions.pop(user_id, None)

    if not session:
        await callback.message.answer("‚õî –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –º–µ–¥–∏—Ç–∞—Ü–∏–∏.")
        return

    end = time.time()
    duration = int((end - session["start"]) / 60)
    duration = max(1, duration)

    user_stats.setdefault(user_id, {})
    user_stats[user_id]["–û–±—â–µ–µ –≤—Ä–µ–º—è"] = user_stats[user_id].get("–û–±—â–µ–µ –≤—Ä–µ–º—è", 0) + duration
    user_stats[user_id][session["title"]] = user_stats[user_id].get(session["title"], 0) + duration
    save_json()

    await callback.message.answer(f"‚úÖ –ú–µ–¥–∏—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ó–∞—Å—á–∏—Ç–∞–Ω–æ: <b>{duration}</b> –º–∏–Ω—É—Ç", reply_markup=main_keyboard())
    await callback.answer()

# === –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===
@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: types.Message):
    user_id = str(message.from_user.id)
    stats = user_stats.get(user_id, {})
    if not stats:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        return

    text = "üìä <b>–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
    for key, value in stats.items():
        text += f"‚Äî {key}: {value} –º–∏–Ω\n"

    await message.answer(text)

# === –ó–ê–ü–£–°–ö ===
async def main():
    load_json()
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
